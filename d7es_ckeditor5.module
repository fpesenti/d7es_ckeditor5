<?php

/**
 * @todo: implement plugins enable/disable.
 *
 * @return array
 */
function d7es_ckeditor5_load_plugins(): array {
  $plugins = module_invoke_all('d7es_ckeditor5_plugins');
  drupal_alter('d7es_ckeditor5_plugins', $plugins);
  return $plugins;
}

/**
 * Implementation of hook_element_info_alter().
 */
function d7es_ckeditor5_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'd7es_ckeditor5_pre_render_text_format';
}

/**
 * @param $element
 *
 * @return array
 */
function d7es_ckeditor5_pre_render_text_format($element): array {
  if (!isset($element['#format'])) {
    return $element;
  }

  // @todo: fix the settings duplication; init must be per element.
  $init = &drupal_static('d7es_ckeditor5_inited', FALSE);
  if ($init) {
    return $element;
  }

  $settings = variable_get('d7es_ckeditor5_settings', []);

  $lib_path = libraries_get_path('ckeditor5');

  // CKEditor 5 CORE.
  $ckeditor_path = url($lib_path . '/ckeditor5/ckeditor5.js', ['absolute' => TRUE]);
  $ckeditor_dir = pathinfo($ckeditor_path)['dirname'];

  $importmaps = ['imports' => [
    'ckeditor5' => $ckeditor_path,
    'ckeditor5/' =>  $ckeditor_dir,
  ]];

  if (!$init) {
    $init = TRUE;
    $plugins = d7es_ckeditor5_load_plugins();
    if ($plugins) {
      foreach ($plugins as $plugin) {
        $importmaps['imports'][$plugin['name']] = url($plugin['path']  . '/plugin.js', ['absolute' => TRUE]);
        foreach ($settings as &$setting) {
          $setting['plugins'][$plugin['name']][] = $plugin['name'];
          if (isset($plugin['button'])) {
            $setting['buttons'][][] = $plugin['button'];
          }
        }
      }
    }
  }

  unset($element['#resizable']);

  // importmap shims
  $element['##attached']['js'][] = libraries_get_path('es-module-shims') . '/es-module-shims.js';

  $importmaps_content = json_encode($importmaps, JSON_UNESCAPED_SLASHES);

  $markup = <<<EOT
<script type="importmap">
  {$importmaps_content}
</script>
EOT;

  $ckeditor_5_script = [
    '#type' => 'markup',
    '#markup' => $markup,
    '#weight' => -100,
  ];

  drupal_add_html_head($ckeditor_5_script, 'ckeditor_5_script');

  $element['#attached']['css'][] = $lib_path . '/ckeditor5/ckeditor5-editor.css';
  $element['#attached']['css'][] = $lib_path . '/ckeditor5/ckeditor5-content.css';

  // CKEditor 5 Premium features.
  $license_key = variable_get('d7es_ckeditor5_license_key', NULL);
  if ($license_key) {
    // @todo: convert to module.
    $element['#attached']['js'][] = [
      'type' => 'file',
      'weight' => -10,
      'data' => $lib_path . '/ckeditor5-premium-features/ckeditor5-premium-features.js',
    ];
    $element['#attached']['css'][] = $lib_path . '/ckeditor5-premium-features/ckeditor5-premium-features.css';
    $element['#attached']['css'][] = $lib_path . '/ckeditor5-premium-features/ckeditor5-premium-features-editor.css';
    $element['#attached']['css'][] = $lib_path . '/ckeditor5-premium-features/ckeditor5-premium-features-content.css';

    $settings['licenseKey'] = $license_key;
  }

  // Drupal bridge.
  d7es_ckeditor5_attach_module(drupal_get_path('module', 'd7es_ckeditor5') . '/js/d7es_ckeditor5.editor.js');

  $element['#attached']['js'][] = ['type' => 'setting', 'data' => ['d7es_ckeditor5' => $settings]];

  return $element;
}

/**
 * @param $path
 *
 * @return void
 */
function d7es_ckeditor5_attach_module($path) {
  $path = url($path, ['absolute' => TRUE]);
  $script = [
    '#type' => 'markup',
    '#markup' => "<script type=\"module\" src=\"$path\"></script>\n",
  ];

  drupal_add_html_head($script, md5($path));
}

/** CORE plugins */

/**
 * @todo: check plugins definition in D10/CKEditor5 (eg. plugin should be main)
 *
 * Implements hook_ckeditor5_plugins().
 */
function d7es_ckeditor5_d7es_ckeditor5_plugins(): array {
  $plugins['Note'] = [
    'name' => 'Note',
    'desc' => nt('Note CKEditor5 plugin.'),
    'path' => drupal_get_path('module', 'd7es_ckeditor5') . '/plugins/note',
    'button' => 'note'
  ];

  return $plugins;
}
